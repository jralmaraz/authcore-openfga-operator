---
name: Build and Publish Container Image

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Cache fallback configuration
  # Set DISABLE_CACHE=true to disable all caching (for cache service outages)
  # DISABLE_CACHE: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.5
        continue-on-error: true
        id: sccache-install

      - name: Cache cargo registry and sccache
        uses: actions/cache@v4
        continue-on-error: true
        id: cache-cargo
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-cargo-

      - name: Configure sccache with fallback
        run: |
          # Check if sccache installation and cache are available
          if [ "${{ steps.sccache-install.outcome }}" = "success" ] && [ "${{ env.DISABLE_CACHE }}" != "true" ]; then
            echo "✅ Configuring sccache with GitHub Actions backend"
            echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          elif command -v sccache >/dev/null 2>&1 && [ "${{ env.DISABLE_CACHE }}" != "true" ]; then
            echo "⚠️  GitHub Actions cache unavailable, using local sccache"
            echo "SCCACHE_DIR=$HOME/.cache/sccache" >> $GITHUB_ENV
            echo "SCCACHE_CACHE_SIZE=2G" >> $GITHUB_ENV
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
            mkdir -p $HOME/.cache/sccache
          else
            echo "❌ Cache unavailable or disabled, building without cache"
            echo "Cache status: sccache-install=${{ steps.sccache-install.outcome }}, cache-cargo=${{ steps.cache-cargo.outcome }}"
            echo "DISABLE_CACHE=true" >> $GITHUB_ENV
          fi

      - name: Pre-fetch dependencies
        run: |
          # Download dependencies without interfering with existing source
          cargo fetch --locked

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            type=sha,prefix=pr-{{number}}-,enable=${{ github.event_name == 'pull_request' }}

      - name: Extract version from Cargo.toml
        id: extract_version
        uses: ./.github/actions/extract-version

      - name: Build container image (status check)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ startsWith(github.ref, 'refs/tags/v') && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ steps.extract_version.outputs.cargo_version }}
            SCCACHE_GHA_ENABLED=${{ env.SCCACHE_GHA_ENABLED || 'false' }}
            RUSTC_WRAPPER=${{ env.RUSTC_WRAPPER || '' }}
            DISABLE_CACHE=${{ env.DISABLE_CACHE || 'false' }}

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: extract_version
        uses: ./.github/actions/extract-version

      - name: Validate version consistency
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=${{ steps.extract_version.outputs.cargo_version }}
          
          echo "Git tag version: $TAG_VERSION"
          echo "Cargo.toml version: $CARGO_VERSION"
          
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "❌ Version mismatch detected!"
            echo "Git tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            echo "Please ensure the git tag version matches the version in Cargo.toml"
            exit 1
          else
            echo "✅ Version consistency validated: $CARGO_VERSION"
          fi

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ steps.extract_version.outputs.cargo_version }}
            SCCACHE_GHA_ENABLED=${{ env.SCCACHE_GHA_ENABLED || 'false' }}
            RUSTC_WRAPPER=${{ env.RUSTC_WRAPPER || '' }}
            DISABLE_CACHE=${{ env.DISABLE_CACHE || 'false' }}

      - name: Generate build summary
        run: |
          echo "## Container Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 Successfully built and published container image!" \
            >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: \`${{ env.REGISTRY }}\`" \
            >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: \`${{ env.IMAGE_NAME }}\`" \
            >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ steps.extract_version.outputs.cargo_version }}\`" \
            >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: \`${{ steps.meta.outputs.tags }}\`" \
            >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "Pull the image:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" \
            >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Minikube Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Use with Minikube:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "export IMAGE_REGISTRY=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "make minikube-deploy-registry" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY